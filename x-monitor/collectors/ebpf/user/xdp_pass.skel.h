/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED! */
#ifndef __XDP_PASS_BPF_SKEL_H__
#define __XDP_PASS_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct xdp_pass_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_program *xdp_prog_simple;
	} progs;
	struct {
		struct bpf_link *xdp_prog_simple;
	} links;
};

static void
xdp_pass_bpf__destroy(struct xdp_pass_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
xdp_pass_bpf__create_skeleton(struct xdp_pass_bpf *obj);

static inline struct xdp_pass_bpf *
xdp_pass_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct xdp_pass_bpf *obj;
	int err;

	obj = (struct xdp_pass_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = xdp_pass_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	xdp_pass_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct xdp_pass_bpf *
xdp_pass_bpf__open(void)
{
	return xdp_pass_bpf__open_opts(NULL);
}

static inline int
xdp_pass_bpf__load(struct xdp_pass_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct xdp_pass_bpf *
xdp_pass_bpf__open_and_load(void)
{
	struct xdp_pass_bpf *obj;
	int err;

	obj = xdp_pass_bpf__open();
	if (!obj)
		return NULL;
	err = xdp_pass_bpf__load(obj);
	if (err) {
		xdp_pass_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
xdp_pass_bpf__attach(struct xdp_pass_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
xdp_pass_bpf__detach(struct xdp_pass_bpf *obj)
{
	return bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *xdp_pass_bpf__elf_bytes(size_t *sz);

static inline int
xdp_pass_bpf__create_skeleton(struct xdp_pass_bpf *obj)
{
	struct bpf_object_skeleton *s;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)
		goto err;

	s->sz = sizeof(*s);
	s->name = "xdp_pass_bpf";
	s->obj = &obj->obj;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs)
		goto err;

	s->progs[0].name = "xdp_prog_simple";
	s->progs[0].prog = &obj->progs.xdp_prog_simple;
	s->progs[0].link = &obj->links.xdp_prog_simple;

	s->data = (void *)xdp_pass_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return -ENOMEM;
}

static inline const void *xdp_pass_bpf__elf_bytes(size_t *sz)
{
	*sz = 1664;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xc0\x03\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0b\0\
\x0a\0\xb7\0\0\0\x02\0\0\0\x95\0\0\0\0\0\0\0\x47\x50\x4c\0\x9f\xeb\x01\0\x18\0\
\0\0\0\0\0\0\x0c\x01\0\0\x0c\x01\0\0\x08\x01\0\0\0\0\0\0\0\0\0\x02\x02\0\0\0\
\x01\0\0\0\x06\0\0\x04\x18\0\0\0\x08\0\0\0\x03\0\0\0\0\0\0\0\x0d\0\0\0\x03\0\0\
\0\x20\0\0\0\x16\0\0\0\x03\0\0\0\x40\0\0\0\x20\0\0\0\x03\0\0\0\x60\0\0\0\x30\0\
\0\0\x03\0\0\0\x80\0\0\0\x3f\0\0\0\x03\0\0\0\xa0\0\0\0\x4e\0\0\0\0\0\0\x08\x04\
\0\0\0\x54\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\x01\0\0\x0d\x06\0\0\0\
\x61\0\0\0\x01\0\0\0\x65\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\x69\0\0\0\x01\0\
\0\x0c\x05\0\0\0\xde\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\0\0\x03\0\
\0\0\0\x08\0\0\0\x0a\0\0\0\x04\0\0\0\xe3\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\
\xf7\0\0\0\0\0\0\x0e\x09\0\0\0\x01\0\0\0\0\x01\0\0\x01\0\0\x0f\0\0\0\0\x0b\0\0\
\0\0\0\0\0\x04\0\0\0\0\x78\x64\x70\x5f\x6d\x64\0\x64\x61\x74\x61\0\x64\x61\x74\
\x61\x5f\x65\x6e\x64\0\x64\x61\x74\x61\x5f\x6d\x65\x74\x61\0\x69\x6e\x67\x72\
\x65\x73\x73\x5f\x69\x66\x69\x6e\x64\x65\x78\0\x72\x78\x5f\x71\x75\x65\x75\x65\
\x5f\x69\x6e\x64\x65\x78\0\x65\x67\x72\x65\x73\x73\x5f\x69\x66\x69\x6e\x64\x65\
\x78\0\x5f\x5f\x75\x33\x32\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\
\x63\x74\x78\0\x69\x6e\x74\0\x78\x64\x70\x5f\x70\x72\x6f\x67\x5f\x73\x69\x6d\
\x70\x6c\x65\0\x78\x64\x70\0\x2f\x68\x6f\x6d\x65\x2f\x63\x61\x6c\x6d\x77\x75\
\x2f\x70\x72\x6f\x67\x72\x61\x6d\x2f\x63\x70\x70\x5f\x73\x70\x61\x63\x65\x2f\
\x78\x2d\x6d\x6f\x6e\x69\x74\x6f\x72\x2f\x63\x6f\x6c\x6c\x65\x63\x74\x6f\x72\
\x73\x2f\x65\x62\x70\x66\x2f\x62\x70\x66\x2f\x78\x64\x70\x5f\x70\x61\x73\x73\
\x2e\x62\x70\x66\x2e\x63\0\x20\x20\x20\x20\x72\x65\x74\x75\x72\x6e\x20\x58\x44\
\x50\x5f\x50\x41\x53\x53\x3b\0\x63\x68\x61\x72\0\x5f\x5f\x41\x52\x52\x41\x59\
\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x5f\x6c\x69\x63\x65\x6e\x73\
\x65\0\x6c\x69\x63\x65\x6e\x73\x65\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\0\
\x14\0\0\0\x1c\0\0\0\x30\0\0\0\0\0\0\0\x08\0\0\0\x79\0\0\0\x01\0\0\0\0\0\0\0\
\x07\0\0\0\x10\0\0\0\x79\0\0\0\x01\0\0\0\0\0\0\0\x7d\0\0\0\xc9\0\0\0\x05\x34\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x02\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x26\0\0\0\x11\0\x03\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\
\0\x2f\0\0\0\x12\0\x02\0\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x1c\x01\0\0\0\0\0\0\
\0\0\0\0\x02\0\0\0\x2c\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\
\0\x01\0\0\0\x08\x07\0\x2e\x74\x65\x78\x74\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\
\x2e\x65\x78\x74\0\x78\x64\x70\0\x2e\x6c\x6c\x76\x6d\x5f\x61\x64\x64\x72\x73\
\x69\x67\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x78\x64\x70\x5f\x70\x72\x6f\x67\
\x5f\x73\x69\x6d\x70\x6c\x65\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\
\x74\x61\x62\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x14\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\
\0\0\0\0\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x27\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x50\0\0\0\0\0\0\0\x04\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x53\0\0\0\x01\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x54\0\0\0\0\0\0\0\x2c\x02\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0b\0\0\0\x01\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x80\x02\0\0\0\0\0\0\x50\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x47\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\xd0\x02\0\0\0\0\0\0\x60\0\0\0\0\0\0\0\x0a\0\0\0\x02\0\0\0\x08\0\0\0\0\0\0\
\0\x18\0\0\0\0\0\0\0\x4f\0\0\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x30\
\x03\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x06\0\0\0\x04\0\0\0\x08\0\0\0\0\0\0\0\x10\0\
\0\0\0\0\0\0\x07\0\0\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\x03\0\0\0\
\0\0\0\x20\0\0\0\0\0\0\0\x06\0\0\0\x05\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\
\0\x18\0\0\0\x03\x4c\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\x60\x03\0\0\0\0\
\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x3f\0\
\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x62\x03\0\0\0\0\0\0\x58\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
}

#endif /* __XDP_PASS_BPF_SKEL_H__ */
